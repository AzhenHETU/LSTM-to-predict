import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.metrics import mean_absolute_error,mean_squared_error
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt


#import the data
f=open('input.csv')
df=pd.read_csv(f)     #read the data
attrs_data=df.iloc[:,3:50].values
print(attrs_data)


#initial the values
rnn_unit=2       #hidden layer units 3.94
input_size=46
output_size=1
lr=0.0006         #learning rate
tf.reset_default_graph()


#Set weights and biases
weights={
         'in':tf.Variable(tf.random_normal([input_size,rnn_unit])),
         'out':tf.Variable(tf.random_normal([rnn_unit,1]))
         }
biases={
        'in':tf.Variable(tf.constant(0.1,shape=[rnn_unit,])),
        'out':tf.Variable(tf.constant(0.1,shape=[1,]))
        }

#get data
def get_data(batch_size=16, time_step=1, train_begin=0, train_end=15):
    batch_index = []
    scaler_for_x = MinMaxScaler(feature_range=(0, 1))  # normalize the number
    scaler_for_y = MinMaxScaler(feature_range=(0, 1))
    #y_data=[]
    #y_data.append(attrs_data[:, -1])
    scaled_x_data = scaler_for_x.fit_transform(attrs_data[:, :-1])
    #scaled_y_data = scaler_for_y.fit_transform(attrs_data[:, -1])
    #scaled_y_data = scaler_for_y.fit_transform(y_data)
    scaled_y_data = scaler_for_y.fit_transform(attrs_data[:, 0].reshape(-1, 1))
    scaled_y_data = scaled_y_data.flatten()
    label_train = scaled_y_data[train_begin:train_end]
    label_test = scaled_y_data[train_end:]
    normalized_train_data = scaled_x_data[train_begin:train_end]
    normalized_test_data = scaled_x_data[train_end:]
    train_x, train_y = [], []  # initialize the training set
    for i in range(len(normalized_train_data) - time_step):
        if i % batch_size == 0:
            batch_index.append(i)
        x = normalized_train_data[i:i + time_step, :46]
        y = label_train[i:i + time_step, np.newaxis]
        train_x.append(x.tolist())
        train_y.append(y.tolist())
    batch_index.append((len(normalized_train_data) - time_step))
    size = (len(normalized_test_data) + time_step - 1) // time_step
    test_x, test_y = [], []
    #for i in range(size - 1):
    for i in range(1):
        x = normalized_test_data[i * time_step:(i + 1) * time_step, :46]
        y = label_test[i * time_step:(i + 1) * time_step]
        test_x.append(x.tolist())
        test_y.extend(y)
        test_x.append((normalized_test_data[(i + 1) * time_step:, :46]).tolist())
        test_y.extend((label_test[(i + 1) * time_step:]).tolist())
    return batch_index, train_x, train_y, test_x, test_y, scaler_for_y


#！！！！！！！！！！！！！！！！！！define neural network！！！！！！！！！！！！！！！！！！
def lstm(X):
    batch_size=tf.shape(X)[0]
    time_step=tf.shape(X)[1]
    w_in=weights['in']
    b_in=biases['in']
    input=tf.reshape(X,[-1,input_size])
    input_rnn=tf.matmul(input,w_in)+b_in
    input_rnn=tf.reshape(input_rnn,[-1,time_step,rnn_unit])
    cell=tf.contrib.rnn.BasicLSTMCell(rnn_unit)
    #cell=tf.contrib.rnn.core_rnn_cell.BasicLSTMCell(rnn_unit)
    init_state=cell.zero_state(batch_size,dtype=tf.float32)
    output_rnn,final_states=tf.nn.dynamic_rnn(cell, input_rnn,initial_state=init_state, dtype=tf.float32)
    output=tf.reshape(output_rnn,[-1,rnn_unit])
    w_out=weights['out']
    b_out=biases['out']
    pred=tf.matmul(output,w_out)+b_out
    return pred,final_states


# ！！！！！！！！！！！！！！！！！！training model！！！！！！！！！！！！！！！！！！

def train_lstm(batch_size=16, time_step=1, train_begin=0, train_end=15):
    X = tf.placeholder(tf.float32, shape=[None, time_step, input_size])
    Y = tf.placeholder(tf.float32, shape=[None, time_step, output_size])
    #X = tf.placeholder(tf.float32, shape=[None, 5, input_size])
    #Y = tf.placeholder(tf.float32, shape=[None, 5, output_size])
    batch_index, train_x, train_y, test_x, test_y, scaler_for_y = get_data(batch_size, time_step, train_begin,train_end)
    pred, _ = lstm(X)
    # loss function
    loss = tf.reduce_mean(tf.square(tf.reshape(pred, [-1]) - tf.reshape(Y, [-1])))
    train_op = tf.train.AdamOptimizer(lr).minimize(loss)
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        # 5000times iterations
        iter_time = 5000
        for i in range(iter_time):
            for step in range(len(batch_index) - 1):
                _, loss_ = sess.run([train_op, loss], feed_dict={X: train_x[batch_index[step]:batch_index[step + 1]],Y: train_y[batch_index[step]:batch_index[step + 1]]})
               # _, loss_ = sess.run([train_op, loss], feed_dict={X: train_x[batch_index[step]:batch_index[step + 1]], Y: 6})
                if i % 1000 == 0:
                    print('iter:', i, 'loss:', loss_)
        #prediction

        test_predict = []
        for step in range(len(test_x)-1):
            prob = sess.run(pred, feed_dict={X: [test_x[step]]})
            predict = prob.reshape((-1))
            test_predict.extend(predict)
        #test_predict = scaler_for_y.inverse_transform(test_predict)
        test_predict = np.array(test_predict)
        #print("prediction-result is",test_predict)
        t_predict=[]
        t_predict.append(test_predict)
        test_predict = scaler_for_y.inverse_transform(t_predict)
        #test_predict = scaler_for_y.fit_transform(test_predict.reshape(-1, 1))
        #test_predict = test_predict.flatten()
        test_y = np.array(test_y)
        #test_y = scaler_for_y.fit_transform(test_y.reshape(-1,1))
        #test_y = test_y.flatten()
        t_y=[]
        t_y.append(test_y)
        test_y = scaler_for_y.inverse_transform(t_y)
        #rmse = np.sqrt(mean_squared_error(test_predict, test_y))
        mae = mean_absolute_error(y_pred=test_predict, y_true=test_y)
        print('mean absolute error:', mae)
    return test_predict
test_predict = train_lstm(batch_size=16,time_step=1,train_begin=0,train_end=15)
print(test_predict)